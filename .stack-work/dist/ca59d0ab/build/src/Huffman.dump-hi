
==================== FINAL INTERFACE ====================
2017-06-09 03:39:03.3357212 UTC

interface patmat-0.1.0.0-KLuXNrCZtHlLUAqfW2NWDz:Huffman 8002
  interface hash: 754ecaadf882d978fd21e68de23a3ec6
  ABI hash: 2eb3439712896b273bf80d417b119d9c
  export-list hash: 366d3c1b37de33ff611dd8ec4677634e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9c295804067bedec166afd3014915bd7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Huffman.codeList
  Huffman.convert
  Huffman.decode
  Huffman.fromList
  Huffman.makeCodeTree
  Huffman.CodeTree{Huffman.Fork Huffman.Leaf char chars left right weight}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:Data.Ord 8353f3682e7412e8b5cbc6269dc48c53
import  -/  base-4.9.1.0:Data.Tuple b07f695e7ce8fe20cc8a32abf62f60ec
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
336af4bc42ec9048f95ad60d060dbd39
  $tc'Fork :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13084846190092044021##
                   8619406479912475447##
                   Huffman.$trModule
                   Huffman.$tc'Fork1) -}
4b1dd01c1d849621e098dcf3f1406f3d
  $tc'Fork1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fork"#) -}
c295d7e5d1b325ef6323bbd175c404cf
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4192668826021726993##
                   15531696843196385831##
                   Huffman.$trModule
                   Huffman.$tc'Leaf1) -}
81af063d5a2bc6b9680312cef8dca55f
  $tc'Leaf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Leaf"#) -}
f86466cecc0a35cbb0bdd819b835ae2d
  $tcCodeTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17248424915151509292##
                   574981936640925242##
                   Huffman.$trModule
                   Huffman.$tcCodeTree1) -}
f3c3bc0deb97eb94a53295d6452acc49
  $tcCodeTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CodeTree"#) -}
01b782e8cf1ff81687693d3d6b37b21b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Huffman.$trModule2
                   Huffman.$trModule1) -}
1bb38093aa0d1ec5ec94ddb28bd968aa
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Huffman"#) -}
f126e64b6c712cd0cf72c41b47585f45
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "patmat-0.1.0.0-KLuXNrCZtHlLUAqfW2NWDz"#) -}
87916a312287dd6c4c9a225912d5b33f
  $wdecode ::
    Huffman.CodeTree
    -> [Huffman.Bit] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
83c149ccf4831f89db6aa8a4fd4f9288
  $wmakeCodeTree ::
    Huffman.CodeTree
    -> Huffman.CodeTree
    -> (# Huffman.CodeTree, Huffman.CodeTree, GHC.Base.String,
          GHC.Types.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Huffman.CodeTree) (w1 :: Huffman.CodeTree) ->
                 (# w, w1,
                    case w of wild {
                      Huffman.Leaf ds ds1
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           ds
                           (case w1 of wild1 {
                              Huffman.Leaf ds2 ds3
                              -> GHC.Types.: @ GHC.Types.Char ds2 (GHC.Types.[] @ GHC.Types.Char)
                              Huffman.Fork ds2 ds3 ds4 ds5 -> ds4 })
                      Huffman.Fork ds ds1 ds2 ds3
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           ds2
                           (case w1 of wild1 {
                              Huffman.Leaf ds4 ds5
                              -> GHC.Types.: @ GHC.Types.Char ds4 (GHC.Types.[] @ GHC.Types.Char)
                              Huffman.Fork ds4 ds5 ds6 ds7 -> ds6 }) },
                    case w of wild {
                      Huffman.Leaf ds ds1
                      -> case ds1 of wild1 { GHC.Types.I# x ->
                         case w1 of wild2 {
                           Huffman.Leaf ds2 ds3
                           -> case ds3 of wild3 { GHC.Types.I# y ->
                              GHC.Types.I# (GHC.Prim.+# x y) }
                           Huffman.Fork ds2 ds3 ds4 ds5
                           -> case ds5 of wild3 { GHC.Types.I# y ->
                              GHC.Types.I# (GHC.Prim.+# x y) } } }
                      Huffman.Fork ds ds1 ds2 ds3
                      -> case ds3 of wild1 { GHC.Types.I# x ->
                         case w1 of wild2 {
                           Huffman.Leaf ds4 ds5
                           -> case ds5 of wild3 { GHC.Types.I# y ->
                              GHC.Types.I# (GHC.Prim.+# x y) }
                           Huffman.Fork ds4 ds5 ds6 ds7
                           -> case ds7 of wild3 { GHC.Types.I# y ->
                              GHC.Types.I# (GHC.Prim.+# x y) } } } } #)) -}
e6f3369b280c6609eb5061d85327add2
  type Bit = GHC.Types.Int
269e3256bcc796b3fd1eb8f1fb34db70
  type CodeTable = [(GHC.Types.Char, [Huffman.Bit])]
a2fde3c46d35ec86ee333de5206c717c
  data CodeTree
    = Leaf {char :: GHC.Types.Char, weight :: GHC.Types.Int}
    | Fork {left :: Huffman.CodeTree,
            right :: Huffman.CodeTree,
            chars :: GHC.Base.String,
            weight :: GHC.Types.Int}
bb8ecd534fe06b0910ac4d4007455795
  char :: Huffman.CodeTree -> GHC.Types.Char
  RecSel Left Huffman.CodeTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Huffman.CodeTree) ->
                 case ds of wild {
                   Huffman.Leaf ds1 ds2 -> ds1
                   Huffman.Fork ipv ipv1 ipv2 ipv3 -> Huffman.char1 }) -}
b04b0fc76b1718cfcfc09f8025e7f412
  char1 :: GHC.Types.Char
  {- Strictness: x -}
d18b406e62355ed9e6f8f6293e4087f8
  chars :: Huffman.CodeTree -> GHC.Base.String
  RecSel Left Huffman.CodeTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Huffman.CodeTree) ->
                 case ds of wild {
                   Huffman.Leaf ipv ipv1 -> Huffman.chars1
                   Huffman.Fork ds1 ds2 ds3 ds4 -> ds3 }) -}
2feb3ea6835283a082fd7d4329ce8436
  chars1 :: GHC.Base.String
  {- Strictness: x -}
ca217635146f3840b4c118f43ff6d1a0
  codeList :: Huffman.CodeTable -> GHC.Base.String -> [Huffman.Bit]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
6b7aeafd41c7152cffe21559ce78473c
  convert :: Huffman.CodeTree -> Huffman.CodeTable
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tree :: Huffman.CodeTree) ->
                 case tree of wild {
                   Huffman.Leaf ds ds1
                   -> Huffman.encodeAll
                        wild
                        (GHC.Types.: @ GHC.Types.Char ds (GHC.Types.[] @ GHC.Types.Char))
                   Huffman.Fork ds ds1 ds2 ds3 -> Huffman.encodeAll wild ds2 }) -}
55579690f5e266b181435f8917a22c5c
  decode :: Huffman.CodeTree -> [Huffman.Bit] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Huffman.CodeTree) (w1 :: [Huffman.Bit]) ->
                 case Huffman.$wdecode w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
76b7dd7e408366b5437cc23d5e61fe78
  encodeAll ::
    Huffman.CodeTree -> GHC.Base.String -> Huffman.CodeTable
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
5e928e91df36fb6de638d176b8f6c68b
  fromList :: GHC.Base.String -> Huffman.CodeTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 case Huffman.fromList_go
                        (Data.OldList.sortBy
                           @ Huffman.CodeTree
                           Huffman.fromList3
                           (GHC.Base.map
                              @ (GHC.Types.Char, GHC.Types.Int)
                              @ Huffman.CodeTree
                              Huffman.fromList2
                              (Huffman.times xs))) of wild {
                   [] -> case Huffman.fromList1 ret_ty Huffman.CodeTree of {}
                   : h ds -> h }) -}
5889a54d21801890b1274a8947f3bf90
  fromList1 :: (Huffman.CodeTree)
  {- Strictness: x -}
3ba1f84363367a4b1fa2cfa3795383a4
  fromList2 :: (GHC.Types.Char, GHC.Types.Int) -> Huffman.CodeTree
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Char, GHC.Types.Int)) ->
                 case ds of wild { (,) x y -> Huffman.Leaf x y }) -}
a607373e4f4c57eca6cb248d82c5da98
  fromList3 ::
    Huffman.CodeTree -> Huffman.CodeTree -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Huffman.CodeTree) (y :: Huffman.CodeTree) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Ordering
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x# :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       Huffman.Leaf ds ds1
                       -> case ds1 of wild1 { GHC.Types.I# y# ->
                          GHC.Classes.compareInt# x# y# }
                       Huffman.Fork ds ds1 ds2 ds3
                       -> case ds3 of wild1 { GHC.Types.I# y# ->
                          GHC.Classes.compareInt# x# y# } }
                 } in
                 case x of wild {
                   Huffman.Leaf ds ds1
                   -> case ds1 of wild1 { GHC.Types.I# x# -> $j x# }
                   Huffman.Fork ds ds1 ds2 ds3
                   -> case ds3 of wild1 { GHC.Types.I# x# -> $j x# } }) -}
805d09fa058d8d3d1c7c6086804993e1
  fromList_go :: [Huffman.CodeTree] -> [Huffman.CodeTree]
  {- Arity: 1, Strictness: <S,1*U> -}
7b93b7be778a52fe40a82a31c20107c5
  left :: Huffman.CodeTree -> Huffman.CodeTree
  RecSel Left Huffman.CodeTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Huffman.CodeTree) ->
                 case ds of wild {
                   Huffman.Leaf ipv ipv1 -> Huffman.left1
                   Huffman.Fork ds1 ds2 ds3 ds4 -> ds1 }) -}
2f8fcf5163f8cd986478232d24a0027f
  left1 :: Huffman.CodeTree
  {- Strictness: x -}
fd02e6ad85a0c5558e9165096ba417bc
  makeCodeTree ::
    Huffman.CodeTree -> Huffman.CodeTree -> Huffman.CodeTree
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Huffman.CodeTree) (w1 :: Huffman.CodeTree) ->
                 case Huffman.$wmakeCodeTree w w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Huffman.Fork ww1 ww2 ww3 ww4 }) -}
37df8a2447357e41ba53a37e68110fcb
  right :: Huffman.CodeTree -> Huffman.CodeTree
  RecSel Left Huffman.CodeTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Huffman.CodeTree) ->
                 case ds of wild {
                   Huffman.Leaf ipv ipv1 -> Huffman.right1
                   Huffman.Fork ds1 ds2 ds3 ds4 -> ds2 }) -}
3bfdf8ffd295679c54d70ea4687d55c0
  right1 :: Huffman.CodeTree
  {- Strictness: x -}
f5188bf32e103c145439597d88c7b2d5
  times :: GHC.Base.String -> [(GHC.Types.Char, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e4e8e9a0f1c408dc4bc4486a6404c995
  weight :: Huffman.CodeTree -> GHC.Types.Int
  RecSel Left Huffman.CodeTree
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Huffman.CodeTree) ->
                 case ds of wild {
                   Huffman.Leaf ds1 ds2 -> ds2
                   Huffman.Fork ds1 ds2 ds3 ds4 -> ds4 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

